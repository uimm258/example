{"ast":null,"code":"var _jsxFileName = \"/Users/maymayliu/antraReact/FRE-Training-080221/MovieTheater/client/src/Context.js\";\nimport React, { Component } from 'react';\nimport AuthApiService from './services/auth-api-service';\nimport TokenService from './services/token-service';\nimport IdleService from './services/idle-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext({\n  user: {},\n  error: null,\n  setError: () => {},\n  clearError: () => {},\n  setUser: () => {},\n  processLogin: () => {},\n  processLogout: () => {},\n  genres: [],\n  movies: [],\n  addGenres: () => {},\n  addMovie: () => {},\n  deleteGenres: () => {},\n  deleteMovie: () => {}\n});\nexport default UserContext;\nexport class UserProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setError = error => {\n      console.error(error);\n      this.setState({\n        error\n      });\n    };\n\n    this.clearError = () => {\n      this.setState({\n        error: null\n      });\n    };\n\n    this.setUser = user => {\n      this.setState({\n        user\n      });\n    };\n\n    this.processLogin = authToken => {\n      TokenService.saveAuthToken(authToken);\n      const jwtPayload = TokenService.parseAuthToken();\n      this.setUser({\n        id: jwtPayload.user_id,\n        name: jwtPayload.name,\n        username: jwtPayload.sub\n      });\n      IdleService.regiserIdleTimerResets();\n      TokenService.queueCallbackBeforeExpiry(() => {\n        this.fetchRefreshToken();\n      });\n    };\n\n    this.processLogout = () => {\n      TokenService.clearAuthToken();\n      TokenService.clearCallbackBeforeExpiry();\n      IdleService.unRegisterIdleResets();\n      this.setUser({});\n    };\n\n    this.logoutBecauseIdle = () => {\n      TokenService.clearAuthToken();\n      TokenService.clearCallbackBeforeExpiry();\n      IdleService.unRegisterIdleResets();\n      this.setUser({\n        idle: true\n      });\n    };\n\n    this.fetchRefreshToken = () => {\n      AuthApiService.refreshToken().then(res => {\n        TokenService.saveAuthToken(res.authToken);\n        TokenService.queueCallbackBeforeExpiry(() => {\n          this.fetchRefreshToken();\n        });\n      }).catch(err => {\n        this.setError(err);\n      });\n    };\n\n    const state = {\n      user: {},\n      error: null\n    };\n\n    const _jwtPayload = TokenService.parseAuthToken();\n\n    if (_jwtPayload) state.user = {\n      id: _jwtPayload.user_id,\n      name: _jwtPayload.name,\n      username: _jwtPayload.sub\n    };\n    this.state = state;\n    IdleService.setIdleCallback(this.logoutBecauseIdle);\n  }\n\n  componentDidMount() {\n    if (TokenService.hasAuthToken()) {\n      IdleService.regiserIdleTimerResets();\n      TokenService.queueCallbackBeforeExpiry(() => {\n        this.fetchRefreshToken();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    IdleService.unRegisterIdleResets();\n    TokenService.clearCallbackBeforeExpiry();\n  }\n\n  render() {\n    const value = {\n      user: this.state.user,\n      error: this.state.error,\n      setError: this.setError,\n      clearError: this.clearError,\n      setUser: this.setUser,\n      processLogin: this.processLogin,\n      processLogout: this.processLogout\n    };\n    return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: value,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/maymayliu/antraReact/FRE-Training-080221/MovieTheater/client/src/Context.js"],"names":["React","Component","AuthApiService","TokenService","IdleService","UserContext","createContext","user","error","setError","clearError","setUser","processLogin","processLogout","genres","movies","addGenres","addMovie","deleteGenres","deleteMovie","UserProvider","constructor","props","console","setState","authToken","saveAuthToken","jwtPayload","parseAuthToken","id","user_id","name","username","sub","regiserIdleTimerResets","queueCallbackBeforeExpiry","fetchRefreshToken","clearAuthToken","clearCallbackBeforeExpiry","unRegisterIdleResets","logoutBecauseIdle","idle","refreshToken","then","res","catch","err","state","setIdleCallback","componentDidMount","hasAuthToken","componentWillUnmount","render","value","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthApiService from './services/auth-api-service'\nimport TokenService from './services/token-service'\nimport IdleService from './services/idle-service'\n\nconst UserContext = React.createContext({\n  user: {},\n  error: null,\n  setError: () => {},\n  clearError: () => {},\n  setUser: () => {},\n  processLogin: () => {},\n  processLogout: () => {},\n  genres: [],\n  movies: [],\n  addGenres: () => {},\n  addMovie: () => {},\n  deleteGenres: () => {},\n  deleteMovie: () => {},\n})\n\nexport default UserContext\n\nexport class UserProvider extends Component {\n  constructor(props) {\n    super(props)\n    const state = { user: {}, error: null }\n\n    const jwtPayload = TokenService.parseAuthToken()\n\n    if (jwtPayload)\n      state.user = {\n        id: jwtPayload.user_id,\n        name: jwtPayload.name,\n        username: jwtPayload.sub,\n      }\n\n    this.state = state;\n    IdleService.setIdleCallback(this.logoutBecauseIdle)\n  }\n\n  componentDidMount() {\n    if (TokenService.hasAuthToken()) {\n      IdleService.regiserIdleTimerResets()\n      TokenService.queueCallbackBeforeExpiry(() => {\n        this.fetchRefreshToken()\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    IdleService.unRegisterIdleResets()\n    TokenService.clearCallbackBeforeExpiry()\n  }\n\n  setError = error => {\n    console.error(error)\n    this.setState({ error })\n  }\n\n  clearError = () => {\n    this.setState({ error: null })\n  }\n\n  setUser = user => {\n    this.setState({ user })\n  }\n\n  processLogin = authToken => {\n    TokenService.saveAuthToken(authToken)\n    const jwtPayload = TokenService.parseAuthToken()\n    this.setUser({\n      id: jwtPayload.user_id,\n      name: jwtPayload.name,\n      username: jwtPayload.sub,\n    })\n    IdleService.regiserIdleTimerResets()\n    TokenService.queueCallbackBeforeExpiry(() => {\n      this.fetchRefreshToken()\n    })\n  }\n\n  processLogout = () => {\n    TokenService.clearAuthToken()\n    TokenService.clearCallbackBeforeExpiry()\n    IdleService.unRegisterIdleResets()\n    this.setUser({})\n  }\n\n  logoutBecauseIdle = () => {\n    TokenService.clearAuthToken()\n    TokenService.clearCallbackBeforeExpiry()\n    IdleService.unRegisterIdleResets()\n    this.setUser({ idle: true })\n  }\n\n  fetchRefreshToken = () => {\n    AuthApiService.refreshToken()\n      .then(res => {\n        TokenService.saveAuthToken(res.authToken)\n        TokenService.queueCallbackBeforeExpiry(() => {\n          this.fetchRefreshToken()\n        })\n      })\n      .catch(err => {\n        this.setError(err)\n      })\n  }\n\n  render() {\n    const value = {\n      user: this.state.user,\n      error: this.state.error,\n      setError: this.setError,\n      clearError: this.clearError,\n      setUser: this.setUser,\n      processLogin: this.processLogin,\n      processLogout: this.processLogout,\n    }\n    return (\n      <UserContext.Provider value={value}>\n        {this.props.children}\n      </UserContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}